datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider               = "prisma-client"
  output                 = "../generated/prisma"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

enum TaskState {
  CREATION
  STANDBY
  RUNNING
  DONE
}

enum TodoState {
  CREATION
  STANDBY
  RUNNING
  DONE
}

enum Gender {
  MALE
  FEMELE
  UNKNOWN
  NONE
}

enum Title {
  Mr
  Mme
  Dct
}

enum Position {
  Manager
  Member
  Secretary
}

enum Language {
  en
  fr
}

enum Role {
  GUEST
  USER
  ADMIN
  SUPERADMIN
  REGULAR
}

enum PermissionClaim {
  CreateCoffee
  UpdateCoffee
  DeleteCoffee
}

enum TokenType {
  EMAIL
  API
  FORGOT
  ACCOUNT
  REFREZH
}

model Organization {
  id           String         @id() @default(uuid(7))
  numSeq       Int            @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt()
  published    Boolean?       @default(false)
  isPublic     Boolean?       @default(true)
  isDeleted    Int?           @default(0)
  isDeletedDT  DateTime?
  name         String         @unique()
  description  String?
  address      Json?          @db.Json()
  emailITAdmin String
  webSite      String?
  OrgEmails    OrgEmail[]     @relation("OrgEmails")
  OrgDomains   OrgDomain[]    @relation("OrgDomains")
  mainOrg      Organization?  @relation("OrgSelfRelation", fields: [mainOrgId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mainOrgId    String?
  OrgEntity    Organization[] @relation("OrgSelfRelation")
  Members      User[]
  Posts        Post[]
  Groups       Group[]
  Files        File[]
  Tasks        Task[]
  Todos        Todo[]
}

model OrgEmail {
  id             Int             @id() @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
  published      Boolean         @default(true)
  isPublic       Boolean         @default(true)
  isDeleted      Int             @default(0)
  isDeletedDT    DateTime?
  email          String
  description    String?
  org            Organization?   @relation("OrgEmails", fields: [orgId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orgId          String
  OrgEmailUseTos OrgEmailUseTo[]
}

model OrgDomain {
  id          Int           @id() @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt()
  published   Boolean       @default(true)
  isPublic    Boolean       @default(true)
  isDeleted   Int           @default(0)
  isDeletedDT DateTime?
  domainName  String
  extension   String
  org         Organization? @relation("OrgDomains", fields: [orgId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orgId       String
}

model User {
  id            String            @id() @default(uuid(7))
  numSeq        Int               @default(autoincrement())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt()
  published     Boolean?          @default(false)
  isPublic      Boolean?          @default(true)
  isDeleted     Int?              @default(0)
  isDeletedDT   DateTime?
  email         String            @unique()
  lastName      String?
  firstName     String?
  title         Title?
  nickName      String?
  Gender        Gender?           @default(UNKNOWN)
  social        Json?             @db.Json()
  Language      Language?         @default(en)
  photoUrl      String?
  dob           DateTime?
  address       Json?             @db.Json()
  isValidated   DateTime?
  isSuspended   DateTime?
  Orgs          Organization[]
  manager       User?             @relation("ManagerTeams", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  managerId     String?
  Team          User[]            @relation("ManagerTeams")
  Profiles      Profile[]         @relation("UsersProfiles")
  Groups        Group[]
  Posts         Post[]
  Comments      Comment[]
  Stories       Story[]
  Todo          UserTodoLink[]
  TodosAuthor   Todo[]
  Tasks         UserTaskLink[]
  TasksAuthor   Task[]
  Files         File[]
  ChangesLogs   ChangesTracking[]
  Roles         Role[]
  Permissions   PermissionClaim[]
  Tokens        Token[]
  ApiKeys       ApiKey[]
  isTfaEnable   Boolean           @default(false)
  tfaSecret     String?
  userSecret    UserSecret?
  followers     UserFollower[]    @relation("followers")
  followings    UserFollower[]    @relation("followings")
  posts_liked   PostLike[]
  passWordFaker String?
}

model UserSecret {
  id        Int      @id() @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  user      User     @relation(fields: [userId], references: [email], onDelete: Cascade)
  userId    String   @unique()
  pwdHash   String?
  salt      String?
  isAdmin   Boolean? @default(false)
}

model Profile {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt()
  published    Boolean   @default(true)
  isPublic     Boolean   @default(true)
  isDeleted    Int       @default(0)
  isDeletedDT  DateTime?
  orderProfile Int
  Users        User[]    @relation("UsersProfiles")
  bio          String
}

model Group {
  id          Int          @id() @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
  published   Boolean      @default(true)
  isPublic    Boolean      @default(true)
  isDeleted   Int          @default(0)
  isDeletedDT DateTime?
  orderGroup  Int
  name        String
  description String?
  isActiv     DateTime?
  Users       User[]
  Tasks       Task[]
  Todos       Todo[]
  Posts       Post[]
  Files       File[]
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
}

model Todo {
  id          String         @id() @default(uuid(7))
  numSeq      Int            @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt()
  published   Boolean        @default(true)
  isDeleted   Int            @default(0)
  isDeletedDT DateTime?
  isPublic    Boolean        @default(false)
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  org         Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  groups      Group[]
  orderTodo   Int
  title       String
  content     String?
  todoState   TodoState      @default(CREATION)
  mainTodo    Todo?          @relation("MainSubTodo", fields: [mainTodoId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  mainTodoId  String?        @map("mainTodo")
  SubTodos    Todo[]         @relation("MainSubTodo")
  Users       UserTodoLink[]
  Tasks       Task[]
}

model UserTodoLink {
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     String
  todo       Todo     @relation(fields: [todoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  todoId     String
  isAuthor   Boolean  @default(true)
  isAssigned Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  comment    String

  @@id([userId, todoId])
}

model Task {
  id          String         @id() @default(uuid(7))
  numSeq      Int            @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt()
  published   Boolean        @default(true)
  isDeleted   Int            @default(0)
  isDeletedDT DateTime?
  isPublic    Boolean        @default(false)
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  org         Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  groups      Group[]
  orderTask   Int
  title       String
  content     String?
  taskState   TaskState      @default(CREATION)
  mainTask    Task?          @relation("MainSubTask", fields: [mainTaskId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  mainTaskId  String?        @map("mainTask")
  SubTasks    Task[]         @relation("MainSubTask")
  Users       UserTaskLink[]
  todo        Todo?          @relation(fields: [todoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  todoId      String?
}

model UserTaskLink {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
  isAuthor   Boolean  @default(true)
  isAssigned Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  comment    String

  @@id([userId, taskId])
}

model Post {
  id          String       @id() @default(uuid(7))
  numSeq      Int          @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
  published   Boolean      @default(true)
  isDeleted   Int          @default(0)
  isDeletedDT DateTime?
  isPublic    Boolean      @default(false)
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  groups      Group[]
  orderPost   Int?
  title       String
  content     String?
  Categories  Category[]   @relation("PostsCategory")
  Comments    Comment[]
  LikedBys    PostLike[]
}

model Category {
  id            String    @id() @default(uuid(7))
  numSeq        Int       @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt()
  published     Boolean?  @default(false)
  isPublic      Boolean?  @default(true)
  isDeleted     Int?      @default(0)
  isDeletedDT   DateTime?
  orderCategory Int
  name          String
  Posts         Post[]    @relation("PostsCategory")
}

model Comment {
  id           String    @id() @default(uuid(7))
  numSeq       Int       @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt()
  published    Boolean?  @default(false)
  isPublic     Boolean?  @default(true)
  isDeleted    Int?      @default(0)
  isDeletedDT  DateTime?
  orderComment Int
  content      String?
  post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
}

model File {
  id          String       @id() @default(uuid(7))
  numSeq      Int          @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
  published   Boolean      @default(true)
  isDeleted   Int          @default(0)
  isDeletedDT DateTime?
  isPublic    Boolean      @default(false)
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  groups      Group[]
  name        String
  storageName String       @unique()
  type        String?
  data        String?
  size        Int?
  isArchived  DateTime?
}

model UserFollower {
  user_id     String
  user        User     @relation("followers", fields: [user_id], references: [id])
  follower_id String
  follower    User     @relation("followings", fields: [follower_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()

  @@id([user_id, follower_id])
}

model PostLike {
  user_id   String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post_id   String
  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()

  @@id([user_id, post_id])
}

model Story {
  id          String    @id() @default(uuid(7))
  numSeq      Int       @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean?  @default(false)
  isPublic    Boolean?  @default(true)
  isDeleted   Int?      @default(0)
  isDeletedDT DateTime?
  caption     String
  user_id     String
  user        User      @relation(fields: [user_id], references: [id])
}

model Image {
  id            Int       @id() @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt()
  published     Boolean   @default(true)
  isPublic      Boolean   @default(true)
  isDeleted     Int       @default(0)
  isDeletedDT   DateTime?
  type          String
  url           String
  associated_id String
  sequence      Int
}

model ConfigParam {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean   @default(true)
  isPublic    Boolean   @default(true)
  isDeleted   Int       @default(0)
  isDeletedDT DateTime?
  name        String    @unique()
  value       String
  utility     String
}

model OrgEmailUseTo {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean   @default(true)
  isPublic    Boolean   @default(true)
  isDeleted   Int       @default(0)
  isDeletedDT DateTime?
  useTo       String
  isActiv     Boolean
  emailOrg    OrgEmail  @relation(fields: [emailOrgId], references: [id])
  emailOrgId  Int
}

model AppEmailDomain {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean   @default(true)
  isPublic    Boolean   @default(true)
  isDeleted   Int       @default(0)
  isDeletedDT DateTime?
  domain      String    @unique()
  allowed     Boolean
}

model RefreshToken {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean   @default(true)
  isPublic    Boolean   @default(true)
  isDeleted   Int       @default(0)
  isDeletedDT DateTime?
  userId      String    @unique()
  tokenId     String    @unique()
}

model ApiKey {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean   @default(true)
  isPublic    Boolean   @default(true)
  isDeleted   Int       @default(0)
  isDeletedDT DateTime?
  key         String
  uuid        String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Scopes      Scope[]   @relation("apikeysscopes")
}

model Scope {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean   @default(true)
  isPublic    Boolean   @default(true)
  isDeleted   Int       @default(0)
  isDeletedDT DateTime?
  scope       String
  ApiKey      ApiKey[]  @relation("apikeysscopes")
}

model Token {
  id          Int       @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean   @default(true)
  isPublic    Boolean   @default(true)
  isDeleted   Int       @default(0)
  isDeletedDT DateTime?
  tokenId     String?   @unique()
  type        TokenType
  emailToken  String?   @unique()
  valid       Boolean   @default(true)
  expiration  DateTime
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model ChangesTracking {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt()
  published    Boolean   @default(true)
  isPublic     Boolean   @default(true)
  isDeleted    Int       @default(0)
  isDeletedDT  DateTime?
  doneAt       DateTime  @default(now())
  modifiedBy   User      @relation(fields: [modifiedById], references: [id])
  modifiedById String
  modelName    String
  recordId     String
  operation    String
  newData      Json
  oldData      Json
}

model AccountValidation {
  id          String    @id() @default(uuid(7))
  numSeq      Int       @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt()
  published   Boolean?  @default(false)
  isPublic    Boolean?  @default(true)
  isDeleted   Int?      @default(0)
  isDeletedDT DateTime?
  isValidated Boolean   @default(false)
  emailToken  String    @unique()
  timeStamp   DateTime
}
